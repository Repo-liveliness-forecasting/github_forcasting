{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Forcasting issues\"\nauthor: \"Forcast Padawan 2\"\ndate: \"November 17, 2016\"\noutput: pdf_document\n---\n\nThe goal of this experiment is to design the best model to forcaste the number of issue in the per day in the comming two weeks. We think that sthis could help Open Source organisation to manage there human ressources.\n\n# Load the data\n\n```{r results='hide', message=FALSE, warning=FALSE}\n#install.packages('forecast')\nlibrary('forecast')\nlibrary(knitr)\n#load the data frame\n# TRY MOVING AVERAGE\nissues.csv <- read.csv(\"issues/julialang_julia.csv\")\ncommits.csv <- read.csv(\"commits/julialang_julia.csv\")\n\nissues.csv$date = as.POSIXlt(as.Date(issues.csv$date,format='%m/%d/%Y'))\ncommits.csv$date = as.POSIXlt(as.Date(commits.csv$date,format='%m/%d/%Y'))\n```\n\nkeep the last 12 months\n\n```{r}\nto_date <- issues.csv$date[length(issues.csv$date)]\nfrom_date <- to_date\nfrom_date$year <- from_date$year - 1\n\nissues.csv <- subset(issues.csv, date <= to_date & date >= from_date)\ncommits.csv <- subset(commits.csv, date <= to_date & date >= from_date)\n```\n\n```{r}\n#loading issues and commits into a ts object\nissues.ts <- ts(issues.csv$number_of_issues, frequency = 7) \n\ncommits.ts <- ts(commits.csv$number_of_commits, frequency = 7) \nplot(issues.ts, main = 'Issues', bty = 'l', ylab = 'Number of Issues')\nplot(commits.ts, main = 'Commits', bty = 'l', ylab = 'Number of Commits')\n```\n\n```{r}\ntime <- time(issues.ts)\n\nn.valid <- 21\nn.train <- length(issues.ts) - n.valid\n\ntrain.issues.ts <- window(issues.ts, start=time[1], end=time[n.train])\nvalid.issues.ts <- window(issues.ts, \n                    start=time[n.train+1], \n                    end=time[n.train+n.valid])\n\ntrain.commits.ts <- window(commits.ts, start=time[1], end=time[n.train])\nvalid.commits.ts <- window(commits.ts, \n                      start=time[n.train+1], \n                      end=time[n.train+n.valid])\n```\n\n# Naive Forecast\n\n## Naive\n\n```{r kable}\ntrain.issues.naive.pred <- naive(train.issues.ts, h=n.valid)\nkable(accuracy(train.issues.naive.pred, valid.issues.ts))\nhist(valid.issues.ts - train.issues.naive.pred$mean)\nplot(valid.issues.ts - train.issues.naive.pred$mean)\nplot(train.issues.naive.pred)\nlines(valid.issues.ts)\n```\n\n## Seasonal Naive\n\n```{r} \ntrain.issues.snaive.pred <- snaive(train.issues.ts, h=n.valid)\nkable(accuracy(train.issues.snaive.pred, valid.issues.ts))\nhist(valid.issues.ts - train.issues.snaive.pred$mean)\nplot(valid.issues.ts - train.issues.snaive.pred$mean)\nplot(train.issues.snaive.pred)\nlines(valid.issues.ts)\n```\n\n# Smoothing\n\n## Holt Winter\n\n```{r}\ntrain.issues.hw.pred <- hw(train.issues.ts, hw = \"ZAA\", h = n.valid)\nkable(accuracy(train.issues.hw.pred, valid.issues.ts))\nhist(valid.issues.ts - train.issues.hw.pred$mean)\nplot(valid.issues.ts - train.issues.hw.pred$mean)\nplot(train.issues.hw.pred)\nlines(valid.issues.ts)\n```\n\n## Double differencing\n\n```{r}\ntrain.issues.d1 <- diff(train.issues.ts, lag = 1)\ntrain.issues.d1.d7 <- diff(train.issues.d1, lag = 7)\n\nma.trailing <- rollmean(train.issues.d1.d7, k = 7, align = \"right\")\nlast.ma <- tail(ma.trailing, 1)\nma.trailing.pred <- ts(c(train.issues.d1.d7[1:6], ma.trailing, rep(last.ma, n.valid)), start=c(2,2), frequency = 7)\n\nma.dd.pred.d1 <- diffinv(ma.trailing.pred, lag = 7, xi=train.issues.d1[1:7])\nma.dd.pred <- diffinv(ma.dd.pred.d1, lag = 1, xi=train.issues.ts[1])\n\nkable(accuracy(ma.dd.pred[(n.train+1):(n.train+n.valid)], valid.issues.ts))\nhist(valid.issues.ts - ma.dd.pred[(n.train+1):(n.train+n.valid)])\nplot(valid.issues.ts - ma.dd.pred[(n.train+1):(n.train+n.valid)])\nplot(ma.dd.pred,col='red')\nlines(issues.ts,col='blue')\n```\n\n# Regression\n\n## Linear additive regression\n\n```{r}\ntrain.issues.linear.regr.add.m <- tslm(train.issues.ts ~ trend + season)\ntrain.issues.linear.regr.add.m\ntrain.issues.linear.regr.add.pred <- forecast(train.issues.linear.regr.add.m , h=n.valid)\n\nkable(accuracy(train.issues.linear.regr.add.pred, valid.issues.ts))\nhist(valid.issues.ts - train.issues.linear.regr.add.pred$mean)\nplot(valid.issues.ts - train.issues.linear.regr.add.pred$mean)\nplot(train.issues.linear.regr.add.pred)\nlines(valid.issues.ts)\n```\n\n## linear multiplicative regression\n\n```{r}\ntrain.issues.linear.regr.mult.m <- tslm(train.issues.ts ~ trend + season, lambda = 0)\ntrain.issues.linear.regr.mult.m\ntrain.issues.linear.regr.mult.pred <- forecast(train.issues.linear.regr.mult.m , h=n.valid)\n\nkable(accuracy(train.issues.linear.regr.mult.pred, valid.issues.ts))\nhist(valid.issues.ts - train.issues.linear.regr.mult.pred$mean)\nplot(valid.issues.ts - train.issues.linear.regr.mult.pred$mean)\nplot(train.issues.linear.regr.mult.pred)\nlines(valid.issues.ts)\n```\n\n# external regression\n\n\n```{r}\nplot(issues.ts, col='blue')\nlines(commits.ts, col='green')\n\ntrain.commits.d1 <- diff(train.commits.ts, lag = 1)\ntrain.commits.d1.d7 <- diff(train.commits.d1, lag = 7)\n\nplot(train.issues.d1.d7, col='blue')\nlines(lag(train.commits.d1.d7,2), col='green')\n\n```\n\n```{r}\ntrain.issues.arima.ext.m <- Arima(train.issues.ts, order=c(1,0,0), seasonal=c(1,0,0), xreg=train.commits.ts )\ntrain.issues.arima.ext.m\n```\n\n\n\n",
    "created" : 1480230453900.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3531290683",
    "id" : "4AFAAD09",
    "lastKnownWriteTime" : 1480230540,
    "last_content_update" : 1480230540394,
    "path" : "D:/Document/MBA NCTU/Term 3/Business analytics/Project/github_forcasting/forecast_issues.Rmd",
    "project_path" : "forecast_issues.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}
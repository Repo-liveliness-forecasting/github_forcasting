library(forecast)
library(knitr)
issues.csv = read.csv('issues/apache_spark.csv')
setwd("F:/IMBA/3rd semester/2b-business analytics using forecasting/final_project/new/github_forcasting")
issues.csv = read.csv('issues/apache_spark.csv')
issues.csv$date = as.POSIXlt(as.Date(issues.csv$date,format='%m/%d/%Y'))
to_date = issues.csv$date[length(issues.csv$date)]
from_date = to_date
from_date$year = from_date$year - 1
issues.csv = subset(issues.csv, date <= to_date & date >= from_date)
issues.ts = ts(issues.csv$number_of_issues, frequency = 7)
n.valid = 21
n.train = length(issues.ts) - n.valid
train.issues.ts = window(issues.ts, start = time[1], end = time[n.train])
time = time(issues.ts)
train.issues.ts = window(issues.ts, start = time[1], end = time[n.train])
valid.issues.ts = window(issues.ts, start = time[n.train + 1],
end = time[n.train + n.valid])
train.issues.lm.multiplicative.seasonality = tslm(train.issues.ts ~ season, lambda = 0)
train.issues.lm.multiplicative.seasonality.pred = forecast(
train.issues.lm.multiplicative.seasonality, h = n.valid)
plot(train.issues.lm.multiplicative.seasonality.pred, bty = 'l',
main = 'Spark (Linear Regression Multiplicative Seasonality)',
ylab = 'Number of Issues')
train.issues.lm.multiplicative.seasonality.pred = forecast(
train.issues.lm.multiplicative.seasonality, h = n.valid, level = 5)
plot(train.issues.lm.multiplicative.seasonality.pred, bty = 'l',
main = 'Spark (Linear Regression Multiplicative Seasonality)',
ylab = 'Number of Issues')
train.issues.lm.multiplicative.seasonality.pred = forecast(
train.issues.lm.multiplicative.seasonality, h = n.valid, level = 10)
plot(train.issues.lm.multiplicative.seasonality.pred, bty = 'l',
main = 'Spark (Linear Regression Multiplicative Seasonality)',
ylab = 'Number of Issues')
train.issues.lm.multiplicative.seasonality.pred = forecast(
train.issues.lm.multiplicative.seasonality, h = n.valid, level = 0.05)
plot(train.issues.lm.multiplicative.seasonality.pred, bty = 'l',
main = 'Spark (Linear Regression Multiplicative Seasonality)',
ylab = 'Number of Issues')
train.issues.lm.multiplicative.seasonality.pred = forecast(
train.issues.lm.multiplicative.seasonality, h = n.valid, level = 95)
plot(train.issues.lm.multiplicative.seasonality.pred, bty = 'l',
main = 'Spark (Linear Regression Multiplicative Seasonality)',
ylab = 'Number of Issues')
train.issues.lm.multiplicative.seasonality.pred = forecast(
train.issues.lm.multiplicative.seasonality, h = n.valid, level = 40)
plot(train.issues.lm.multiplicative.seasonality.pred, bty = 'l',
main = 'Spark (Linear Regression Multiplicative Seasonality)',
ylab = 'Number of Issues')
train.issues.lm.multiplicative.seasonality.pred = forecast(
train.issues.lm.multiplicative.seasonality, h = n.valid, level = 5)
plot(train.issues.lm.multiplicative.seasonality.pred, bty = 'l',
main = 'Spark (Linear Regression Multiplicative Seasonality)',
ylab = 'Number of Issues')
lines(train.issues.lm.multiplicative.seasonality.pred$fitted, lwd = 2, col = 'blue')
lines(valid.issues.ts)
plot(train.issues.ts - train.issues.lm.multiplicative.seasonality.pred$fitted,
main = 'Apache Spark (Linear Regression Multiplicative Seasonality: Residuals)',
bty = 'l', xlab = 'Week',
ylab = 'Errors', xlim = c(0, 54))
lines(valid.issues.ts - train.issues.lm.multiplicative.seasonality.pred$mean, lwd = 2,
col = 'blue')
kable(accuracy(train.issues.lm.multiplicative.seasonality.pred, valid.issues.ts))
commits.ts = ts(issues.csv$lag_number_of_commits, frequency = 7)

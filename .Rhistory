setwd("F:/IMBA/3rd semester/2b-business analytics using forecasting/final_project/new/github_forcasting")
library(forecast)
library(knitr)
issues.csv = read.csv('issues/apache_spark.csv')
issues.csv$date = as.POSIXlt(as.Date(issues.csv$date,format='%m/%d/%Y'))
to_date = issues.csv$date[length(issues.csv$date)]
from_date = to_date
from_date$year = from_date$year - 1
issues.csv = subset(issues.csv, date <= to_date & date >= from_date)
issues.ts = ts(issues.csv$number_of_issues, frequency = 7)
n.sample = 14
n.valid = 21
separate.train.test = function(timeseries, n.valid) {
time = time(timeseries)
n.train = length(timeseries) - n.valid
results = list()
results$train.ts = window(timeseries, start = time[1],
end = time[n.train])
results$valid.ts = window(timeseries, start = time[n.train + 1],
end = time[n.train + n.valid])
return(results)
}
time = time(issues.ts)
all.issues = sapply(0:(n.sample - 1), function(i) return(
separate.train.test(window(issues.ts, start = time[1],
end = time[length(issues.ts) - i]), n.valid
)))
mean.all.accuracy <- function(all.forecast) {
Reduce("+", all.forecast['summary',])/length(all.forecast['summary',])
}
plot.all.residuals <- function(all.forecast, plot.title) {
plot(1, bty = 'l', main = plot.title, xlim=c(48.5, 53.3), ylim=c(-30, 30),
xlab = 'Week', ylab = 'Errors')
sapply(1:n.sample, function(i) lines(all.forecast['residual',i]$residual))
return(NULL)
}
plot.all.pred = function(all.forecast, plot.title) {
plot(issues.ts, main = plot.title, bty = 'l', ylab = 'Number of Issues',
xlab = 'Week')
if (class(all.forecast['pred', 1]$pred) == 'forecast') {
sapply(1:n.sample, function(i) lines(
all.forecast['pred', i]$pred$mean, lwd = 2, col = 'blue'))
} else {
sapply(1:n.sample, function(i) lines(all.forecast['pred', i]$pred,
lwd = 2, col = 'blue'))
}
return(NULL)
}
hist.all.residuals = function(all.forecast, plot.title) {
residuals = sapply(1:n.sample, function(i) as.numeric(
all.forecast['residual', i]$residual))
boxplot(residuals)
hist(residuals, main = plot.title)
quantile(residuals, c(0.975, 0.95, 0.05, 0.025))
}
naive.forecast = function(sample) {
results = list()
results$valid = sample$valid.ts
results$pred = naive(sample$train.ts, h = n.valid)
results$residual = sample$valid.ts - results$pred$mean
results$summary = accuracy(results$pred, sample$valid.ts)
return(results)
}
all.naive.forecast = sapply(1:n.sample, function(i) return(
naive.forecast(all.issues[, i])
))
kable(mean.all.accuracy(all.naive.forecast))
plot.all.pred(all.naive.forecast, 'Apache Spark (Naive Forecast)')
plot.all.residuals(all.naive.forecast, 'Apache Spark (Naive Forecast Residuals)')
all.naive.forecast
regr.add.forecast <- function(sample) {
results = list()
results$valid <- sample$valid.ts
results$model <- tslm(sample$train.ts ~ season)
results$pred <- forecast(results$model, h=n.valid)
results$residual <- sample$valid.ts - results$pred$mean
results$summary <- accuracy(results$pred, sample$valid.ts)
return(results)
}
all.regr.add.forecast <- sapply(1:n.sample, function(i) return(
regr.add.forecast(all.issues[, i])))
plot.all.pred(all.regr.add.forecast,
'Apache Spark (Linear Regression Additive Seasonality)')
all.regr.add.forecast
naive.for <- naive(sample$train.ts, h=n.valid)
naive.for <- naive(train.ts, h=n.valid)
naive.for <- naive(issues.csv, h=n.valid)
naive.forecast = function(sample) {
results = list()
results$valid = sample$valid.ts
results$pred = naive(sample$train.ts, h = n.valid)
results$fitted = results$pred$fitted
results$residual = sample$valid.ts - results$pred$mean
results$summary = accuracy(results$pred, sample$valid.ts)
return(results)
}
all.naive.forecast = sapply(1:n.sample, function(i) return(
naive.forecast(all.issues[, i])
))
all.naive.forecast
plot.all.residuals <- function(all.forecast, plot.title) {
plot(1, bty = 'l', main = plot.title, xlim=c(48.5, 53.3), ylim=c(-30, 30),
xlab = 'Week', ylab = 'Errors')
sapply(1:n.sample, function(i) lines(all.forecast['fitted', i]$fitted))
sapply(1:n.sample, function(i) lines(all.forecast['residual',i]$residual, lwd = 2, col = 'blue'))
return(NULL)
}
plot.all.pred(all.naive.forecast, 'Apache Spark (Naive Forecast)')
plot.all.residuals(all.naive.forecast, 'Apache Spark (Naive Forecast Residuals)')
plot.all.residuals <- function(all.forecast, plot.title) {
plot(1, bty = 'l', main = plot.title, xlim = c(0, 53.3), ylim = c(-30, 30),
xlab = 'Week', ylab = 'Errors')
sapply(1:n.sample, function(i) lines(all.forecast['fitted', i]$fitted))
sapply(1:n.sample, function(i) lines(all.forecast['residual',i]$residual, lwd = 2, col = 'blue'))
return(NULL)
}
plot.all.residuals(all.naive.forecast, 'Apache Spark (Naive Forecast Residuals)')
plot.all.residuals <- function(all.forecast, plot.title) {
plot(1, bty = 'l', main = plot.title, xlim = c(25, 53.3),
xlab = 'Week', ylab = 'Errors')
sapply(1:n.sample, function(i) lines(all.forecast['fitted', i]$fitted))
sapply(1:n.sample, function(i) lines(all.forecast['residual',i]$residual, lwd = 2, col = 'blue'))
return(NULL)
}
plot.all.residuals(all.naive.forecast, 'Apache Spark (Naive Forecast Residuals)')
plot.all.residuals <- function(all.forecast, plot.title) {
plot(1, bty = 'l', main = plot.title, xlim = c(25, 53.3), ylim = c(-50, 50),
xlab = 'Week', ylab = 'Errors')
sapply(1:n.sample, function(i) lines(all.forecast['fitted', i]$fitted))
sapply(1:n.sample, function(i) lines(all.forecast['residual',i]$residual, lwd = 2, col = 'blue'))
return(NULL)
}
plot.all.residuals(all.naive.forecast, 'Apache Spark (Naive Forecast Residuals)')
test = snaive(issues.ts, h = n.valid)
snaive.forecast <- function(sample) {
results = list()
results$valid <- sample$valid.ts
results$pred <- snaive(sample$train.ts, h = n.valid)
results$fitted <- results$pred$fitted
results$residual <- sample$valid.ts - results$pred$mean
results$summary <- accuracy(results$pred, sample$valid.ts)
return(results)
}
all.snaive.forecast <- sapply(1:n.sample, function(i) return(
snaive.forecast(all.issues[, i])))
plot.all.pred(all.snaive.forecast, 'Apache Spark (Seasonal Naive Forecast)')
plot.all.residuals(all.snaive.forecast, 'Apache Spark (Seasonal Naive Forecast Residuals)')
test2 = tslm(issues.ts ~ season)
plot.all.residuals <- function(all.forecast, plot.title) {
plot(1, bty = 'l', main = plot.title, xlim = c(25, 53.3), ylim = c(-50, 50),
xlab = 'Week', ylab = 'Errors')
sapply(1:n.sample, function(i) lines(all.forecast['train', i]$train - all.forecast['fitted', i]$fitted))
sapply(1:n.sample, function(i) lines(all.forecast['residual',i]$residual, lwd = 2, col = 'blue'))
return(NULL)
}
naive.forecast = function(sample) {
results = list()
results$valid = sample$valid.ts
results$train = sample$train.ts
results$pred = naive(sample$train.ts, h = n.valid)
results$fitted = results$pred$fitted
results$residual = sample$valid.ts - results$pred$mean
results$summary = accuracy(results$pred, sample$valid.ts)
return(results)
}
all.naive.forecast = sapply(1:n.sample, function(i) return(
naive.forecast(all.issues[, i])
))
plot.all.residuals(all.naive.forecast, 'Apache Spark (Naive Forecast Residuals)')
snaive.forecast <- function(sample) {
results = list()
results$train = sample$train.ts
results$valid <- sample$valid.ts
results$pred <- snaive(sample$train.ts, h = n.valid)
results$fitted <- results$pred$fitted
results$residual <- sample$valid.ts - results$pred$mean
results$summary <- accuracy(results$pred, sample$valid.ts)
return(results)
}
all.snaive.forecast <- sapply(1:n.sample, function(i) return(
snaive.forecast(all.issues[, i])))
plot.all.pred(all.snaive.forecast, 'Apache Spark (Seasonal Naive Forecast)')
plot.all.residuals(all.snaive.forecast, 'Apache Spark (Seasonal Naive Forecast Residuals)')
regr.add.forecast <- function(sample) {
results = list()
results$train = sample$train.ts
results$valid <- sample$valid.ts
results$model <- tslm(sample$train.ts ~ season)
results$pred <- forecast(results$model, h=n.valid)
results$residual <- sample$valid.ts - results$pred$mean
results$summary <- accuracy(results$pred, sample$valid.ts)
return(results)
}
all.regr.add.forecast <- sapply(1:n.sample, function(i) return(
regr.add.forecast(all.issues[, i])))
plot.all.pred(all.regr.add.forecast,
'Apache Spark (Linear Regression Additive Seasonality)')
plot.all.residuals(all.regr.add.forecast,
'Apache Spark (Linear Regression Additive Seasonality: Residuals)')
regr.add.forecast <- function(sample) {
results = list()
results$train = sample$train.ts
results$valid <- sample$valid.ts
results$model <- tslm(sample$train.ts ~ season)
results$pred <- forecast(results$model, h=n.valid)
results$fitted = results$pred$fitted
results$residual <- sample$valid.ts - results$pred$mean
results$summary <- accuracy(results$pred, sample$valid.ts)
return(results)
}
all.regr.add.forecast <- sapply(1:n.sample, function(i) return(
regr.add.forecast(all.issues[, i])))
plot.all.pred(all.regr.add.forecast,
'Apache Spark (Linear Regression Additive Seasonality)')
plot.all.residuals(all.regr.add.forecast,
'Apache Spark (Linear Regression Additive Seasonality: Residuals)')
